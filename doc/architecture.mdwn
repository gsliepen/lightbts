LightBTS architecture
---------------------

LightBTS is a bug tracking system based on email messages.
That does not mean it only works via email, however data and control messages are stored in RFC 2822 format.
On top of this, an SQLite database is used to provide an index into the collection of email messages in a LightBTS instance.

A bug is a collection of email messages that refer to each other.
All messages have a unique identifier (the Message-ID header field),
and can refer to other messages (using the In-Reply-To and References header fields).
Usually, there is one initial message that does not reference any other messages.
This message opens a bug, and its Message-ID is a unique identifier for this bug.

However, for human purposes, each bug is also given a number starting at 1.
This bug number is included in the topic in all email generated by LightBTS.

Each bug also has state associated with it, like whether the bug is open or closed,
which versions of the software are affected by the bug, tags, et cetera.
New state and changes in existing state is done using pseudo-headers in message bodies.

The SQLite index stores a mapping of Message-IDs to bug numbers.

Examples
--------

## Opening a bug

This is an example message that opens a bug:

    From: Some User <user@example.org>
    To: Foo BTS <bugs@foo.org>
    Subject: Option --xyz broken
    Message-ID: 123@user
    
    Version: 1.0.1
    Tags: options
    Severity: normal
    
    Using option --xyz causes the program to crash.

Upon receiving this message, a new, previously unused bug number is chosen, say 1.
An entry in the bug table is created with that number.
The Subject and Severity fields are also stored in that entry in the bug table.
The Version and Tags are stored in separate tables,
since multiple versions and tags can be associated with a single bug.
An entry is added to the index that message with id "123@user" belongs to bug 1.
Optionally, LightBTS sends a confirmation email back:

    From: Foo BTS <bugs@foo.org>
    To: Some User <user@example.org>
    Subject: Bug #1: Option --xyz broken
    Message-ID: 234@foobts
    In-Reply-To: 123@user
    Auto-Submitted: auto-replied
    
    Thank you for reporting a bug, which has been assigned number 1.

If this message is sent, then id "234@foobts" is also linked to bug 1 in the index.
This way, replies to either the original report or the confirmation email will be associated with bug 1.

## Message forwarding

Whenever a message is received, it is forwarded to interested parties.
Initially, this is the project owner.
However, everyone who submits a message to a given bug will be added to that bug's list of recipients.
Messages are forwarded to all recipients known for a bug (except the original sender of that message).

## Control messages

Normally status changes occur when receiving a message, however sometimes it can be caused by other means.
In that case, LightBTS generates a message recording the changes.
The format of these control messages is exactly the same as a regular email message would be.
For example, the following control message is generated in response to setting the bug severity to important:

From: Project Owner <owner@foo.org>
To: Foo BTS <bugs@foo.org>
Subject: Bug #1: Option --xyz broken
Message-ID: 345@foobts
In-Reply-To: 123@user

Severity: important

The index
---------

The idea is that all information of a LightBTS instance is contained in the collection of RFC 2822 messages.
However, an index is necessary to be able to quickly access the required information.
Normally, the index is updated each time a message is processed.
However, it should be possible to completely rebuild the index from a collection of messages.
This requires the messages to be processed in the same order as they were originally received.

Merging and splitting
---------------------

TODO: how to merge and split bugs?

Integration with VCSes
----------------------

LightBTS does not require a version control system to work.
However, if one would like to integrate a LightBTS instance with, say, a git repository, then the best way to do this is to store the collection of messages in a separate branch.
Don't store the index in git itself.
Use a post-commit and/or post-update hook to have LightBTS import any new emails.
TODO: add an --index-only option to lightbts-email, and also have LightBTS call hooks whenever a new message is recorded.

