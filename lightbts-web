#!/usr/bin/python3
# coding: utf-8

import argparse
import os
import sys
import syslog
import string
import uritools

import lightbts

copyright = 'LightBTS ' + lightbts.__version__ + ', copyright (c) 2014-2016 Guus Sliepen'

def init():
    lightbts.init(home)

    # Load templates
    global tmpl_main
    tmpl_main = lightbts.get_template('main.html')

    global tmpl_bugrow
    tmpl_bugrow = lightbts.get_template('bugrow.html')

    global tmpl_bug
    tmpl_bug = lightbts.get_template('bug.html')

    global tmpl_message
    tmpl_message = lightbts.get_template('message.html')

    if not tmpl_main or not tmpl_bugrow or not tmpl_bug or not tmpl_message:
        exit(1)

def exit():
    lightbts.exit()
    pass

def do_bug(environ, start_response, query):
    init()
    id = query['bug']
    if len(id) != 1 or not id[0]:
        start_response('400 Bad Request', [('Content-Type', 'text/plain; charset=utf-8')])
        return 'Exactly one bug id should be specified.\n'
    else:
        id = id[0]
    bug = lightbts.get_bug(id);

    if not bug:
        start_response('404 NOT FOUND', [('Content-Type', 'text/plain; charset=utf-8')])
        return 'Bug ' + query['bug'] + ' does not exist.\n'

    start_response('200 OK', [('Content-Type', 'text/html; charset=utf-8')])

    msglist = ''
    for msg in bug.get_messages():
        msglist += tmpl_message.substitute({'msgid': msg.msg['Message-ID'], 'from': msg.msg['From'], 'to': msg.msg['To'], 'subject': msg.msg['Subject'], 'date': msg.msg['Date'], 'body': msg.msg.get_payload()})

    page = tmpl_bug.substitute({'id': bug.id, 'submitter': 'x', 'date': 'x', 'status': bug.statusname, 'severity': bug.severityname, 'title': bug.title, 'msglist': msglist, 'root': lightbts.webroot, 'copyright': copyright})
    exit()
    return str(page)

def myapp(environ, start_response):
    uri = uritools.urisplit('?' + environ['QUERY_STRING'])
    query = uri.getquerydict()
    if 'bug' in query:
        return [do_bug(environ, start_response, query).encode('utf-8')]

    start_response('200 OK', [('Content-Type', 'text/html; charset=utf-8')])

    init()
    buglist = ''
    class args(object):
        prop=()
    for bug in lightbts.list_bugs(args):
        buglist += tmpl_bugrow.substitute({'id': bug._id, 'status': bug.statusname, 'severity': bug.severityname, 'title': bug.title})
    page = tmpl_main.substitute({'buglist': str(buglist), 'copyright': copyright, 'root': lightbts.staticroot})

    return [str(page).encode('utf-8')]

if __name__ == '__main__':
    global home
    # Initialize
    syslog.syslog("LightBTS web starting")

    parser = argparse.ArgumentParser(description='LightBTS web frontend.', epilog='Report bugs to guus@sliepen.org.')
    parser.add_argument('-d', '--data', metavar='DIR', help='directory where LightBTS stores its data')
    parser.add_argument('-p', '--port', metavar='PORT', help='TCP port to listen on', type=int, default=8080)
    parser.add_argument('-s', '--socket', metavar='SOCKET', help='Path to FastCGI socket')
    parser.add_argument('--version', action='version', version='LightBTS ' + lightbts.__version__)

    args = parser.parse_args()
    home = args.data
    interface = os.getenv("GATEWAY_INTERFACE")

    if not interface:
        from wsgiref.simple_server import make_server
        httpd = make_server('127.0.0.1', args.port, myapp)
        print("Serving on port " + str(args.port) + "...", file=sys.stderr)
        httpd.serve_forever()
    elif interface.startswith("CGI/1."):
        from wsgiref.handlers import CGIHandler
        CGIHandler().run(myapp)
    elif interface.startswith("FastCGI/"):
        from flup.server.fcgi import WSGIServer
        if args.socket:
            WSGIServer(myapp, bindAddress=args.socket).run()
        else:
            WSGIServer(myapp).run()
    else:
        print("Unknown GATEWAY_INTERFACE '" + interface + "'", file=sys.stderr)
        sys.exit(1)
